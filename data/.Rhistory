sub = subset(absDevDF$absDev,absDevDF$test==i)
for (i in 1:16)
vioplot(subset(absDevDF$absDev,absDevDF$test==i),at=i)
for (i in 1:16)
vioplot(subset(absDevDF$absDev,absDevDF$test==i),at=i,add=TRUE)
)
for (i in 1:16)
vioplot(subset(absDevDF$absDev,absDevDF$test==i),at=i,add=TRUE)
ggplot(absDevDF,aes(x=absDev,y=test)) + geom_violin()
library(ggplot2)
ggplot(absDevDF,aes(x=absDev,y=test)) + geom_violin()
ggplot(absDevDF,aes(y=absDev,x=test)) + geom_violin()
ggplot2.violinplot(data=absDevDF,xName='absDev',yName='test')
install_github("easyGgplot2", "kassambara")
install.packages("devtools")
library(devtools)
install_github("easyGgplot2", "kassambara")
library(easyGgplot2)
ggplot2.violinplot(data=absDevDF,xName='absDev',yName='test')
ggplot2.violinplot(data=absDevDF,yName='absDev',xName='test')
devDF = data.frame(value=deviation,group=percept$Test)
ggplot2.violinplot(data=devDF,yName='value',xName='group')
ggplot2.violinplot(data=devDF,yName='value',xName='group')
devDF = data.frame(value=deviation,test=absDevDF$test)
ggplot2.violinplot(data=devDF,yName='value',xName='group')
ggplot2.violinplot(data=devDF,yName='value',xName='test')
montana = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Dataset/MontanaPopulationData.csv")
montana = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MontanaPopulationData.csv")
montanaDF = data.frame(year=montana[,1],pop=montana[,2])
plot(montana[,1],montana[,2])
log
plot(montana[,1],log(montana[,2],base=2)
)
plot(montana[,1],log(montana[,2]))
tapply
apply
help(apply)
montana
log(montana[,2],10)
plot(montana[,1],log(montana[,2],10))
plot(montana[,1],log(montana[,2],2))
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log2(Population")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
par(new=TRUE)
axis(4,ylim=c(montana[1,2],montana[12,2]),col="red")
axis(4,ylim=c(montana[1,2],montana[12,2]),col="red",las=1)
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
axis(4,ylim=c(montana[1,2],montana[12,2]),col="red",las=1)
axis(4,ylim=c(montana[1,2],montana[12,2]),col="red")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
axis(4,ylim=c(0,7000),col="red")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
plot(montana[,1],montana[,2],col="white")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
par(new=TRUE)
plot(montana[,1],montana[,2],col="white")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
par(new=TRUE)
plot(montana[,1],montana[,2],col="white",xlab="",ylab="")
plot(montana[,1],montana[,2],col="white",xlab="",ylab="",axes=FALSE)
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
par(new=TRUE)
plot(montana[,1],montana[,2],col="white",xlab="",ylab="",axes=FALSE)
axis(4,ylim=c(montana[1,2],montana[12,2]),col="red")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
axis(2,ylim=c(montana[1,2],montana[12,2]))
axis(1,ylim=c(montana[1,2],montana[12,2]))
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b")
View(montana)
View(montana)
text(montana[,1],montana[,2])
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b",main="Log 2 of montana population")
plot(montana[,1],log(montana[,2],2),xlab="Year",ylab="Log(Population",type="b",main="Logarithms of montana population")
growthRate=c(1:11)
growthRate
for i in (2:12)
for (i in 2:12)
growthRate[i-1] = montana[i,2]-montana[i-1,2]
growthRate
for (i in 2:12)
growthRate[i-1] = (montana[i,2]-montana[i-1,2])/montana[i-1,2]
growthRate
lines(montana[2:12,1],growthRate)
plot(montana[2:12,1],growthRate)
barplot(montana[2:12,1],growthRate)
barplot(growthRate)
barplot(growthRate,names.arg=c(montana[2,1],montana[12,1]))
barplot(growthRate,names.arg=c(1900,2000))
barplot(growthRate,names.arg=c(1900,2000,11))
barplot(growthRate,names.arg=c(1900:2000))
barplot(growthRate)
barplot(growthRate,names.arg = seq(1900,2000,10))
barplot(growthRate,names.arg = seq(1900,2000,10),ylab="Growth Rate",xlab="Year")
barplot(growthRate,names.arg = seq(1900,2000,10),ylab="Growth Rate",xlab="Year",main="Montana Population Growth Rate")
growthRate
View(percept)
View(percept)
messier = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messier
View(messier)
plot(messier[,5])
plot(log(messier[,5],10))
plot(log(messier[,5],10),xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances")
plot(messier[,13],xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances")
plot(log(messier[,5],10),xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances")
log(message[,5,10)
log(message[,5],10)
log(messier[,5],10)
plot(messier[,13],xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances")
plot(log(messier[,5],10),xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances")
plot(log(messier[,5],10),xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances",type="b")
plot(messier[,13],xlab="Messier#",ylab="Log 10 of distances",main="Logarithms of distances",type="b")
plot(messier[,13])
plot(messier[,13],type="b")
plot(messier[,14])
plot(messier[,13])
plot(messier[,13],type="l")
z=messier[,13]
plot(z)
perceptDF = data.frame(value=absDeviation,group=percept$TestNumber)
perceptDF = data.frame(value=absDeviation,group=percept$TestNumber)
boxplot(perceptDF$value ~ perceptDF$group,main="Response abs dev dist",col=c("red"))
boxplot(perceptDF$value ~ perceptDF$group,main="Response abs dev dist",col=c("red"))
View(percept)
intel=read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/Intel1990-2000.csv")
intel=read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/Intel1990-2000.csv")
intel
waterlevel = read.table("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/PortlandWaterLevel2003.xlsx")
waterlevel = read.table("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/PortlandWaterLevel2003.csv")
waterlevel
View(intel)
waterlevel
View(waterlevel)
waterlevel = read.table("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/PortlandWaterLevel2003.csv")
waterlevel = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/PortlandWaterLevel2003.csv")
plot(waterlevel[,4],waterlevel[,2])
plot(waterlevel[,2],waterlevel[,4])
dev.new(width=10,height=8)
plot(waterlevel[,2],waterlevel[,4])
plot(waterlevel[,2],waterlevel[,4],type='b')
f21 <- rep(1/21,21)
ma <- filter(waterlevel[,4],f21,sides=2)
lines(waterlevel[,2],waterlevel[,4])
lines(waterlevel[,2],waterlevel[,4])
par(new)
lines(waterlevel[,2],ma)
plot(waterlevel[,2],ma)
messier
ggplot2.violinplot(data=absDevDF,xName='absDev',yName='test')
library(ggplot2)
ggplot2.violinplot(data=absDevDF,xName='absDev',yName='test')
library(easyGgplot2)
ggplot2.violinplot(data=absDevDF,xName='absDev',yName='test')
ggplot2.violinplot(data=devDF,yName='value',xName='test')
devDF
messierDF = data.frame(dist=messier[,5],kind=messier[,3])
ggplot2.violinplot(messierDF)
ggplot(absDevDF,aes(y=absDev,x=test)) + geom_violin()
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
messierDF
messierDF$dist[40]=0
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
messier[40,5]=0
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
messier
messierDF
messierDF$dist[40]=0
messierDF$dist
messierDF
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
ggplot(messierDF,aes(Kind=factor(kind),Log10Dist=dist)) + geom_violin()
ggplot(messierDF,aes(y=factor(kind),x=dist)) + geom_violin()
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin()
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance")
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
messier
messier = messier[!40,]
messier
messierDF
messierDF2 = messierDF[!c==40,]
messierDF2 = messierDF[!40,]
messierDF2
rm(messierDF2)
messierDF$dist[40]=messierDF$dist[39]
messierDF$kind[40]=messierDF$kind[39]
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
c=[1,2,7,6,3,4,5]
messierMean <- apply(messierDF$dist,1,mean)
tapply(messierDF$dist,messierDF$kind,mean)
distMean <- tapply(messierDF$dist,messierDF$kind,mean)
distMean
distMean=distMean[,2:8]
distMean=distMean[2:8]
distMean
ggplot(messierDF,aes(factor(kind,levels=kind[order(distMean)]),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
messierDF$kind = factor(messierDF$kind, levels = messierDF$kind[order(distMean)])
messierDF
messier = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messier = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
messierDF
ggplot(messierDF,aes(factor(kind,levels=kind[order(distMean)]),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
distMean
order(distMean)
messierDF$kind[order(distMean)]
messierDF$kind
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3])
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
library("ggplot2")
ggplot(messierDF,aes(factor(kind),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
distMean = mapply(mean,messierDF$dist)
distMean
messierDF$dist
tapply(messierDF$dist,messierDF$kind,mean)
distMean <- tapply(messierDF$dist,messierDF$kind,mean)
distMean
ggplot(messierDF,aes(factor(kind),dist=reorder(dist,distMean))) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
distMean <- tapply(messierDF$dist,messierDF$kind,mean)
distMean
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
ggplot(messierDF,aes(factor(kind),dist=reorder(dist,messierDF[,15]))) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
ggplot(messierDF,aes(factor(kind),dist=reorder(dist,messier[,15]))) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
messierDF = data.frame(dist=log(messier[,5],10),kind=messier[,3],mean=messierDF[,15])
View(messier)
View(messier)
distMean
messierDF
ddply(messierDF,.(kind),summarize,meanDist=mean(dist))
library(plyr)
ddply(messierDF,.(kind),summarize,meanDist=mean(dist))
rowMeans(messierDF$dist)
rowMeans(messier[,5])
rowMeans(messier)
ddply(messierDF,.(kind),summarize,meanDist=mean(dist))
distMean <- ddply(messierDF,.(kind),summarize,meanDist=mean(dist))
distMean['Asterism']
distMean[Asterism]
distMean$Asterism
distMean[distMean$kind=="Asterism",2]
objectMean <- c(1:109)
for (i in c(1:109))
objectMean <- distMean[distMean$kind==messierDF$kind[i,],2]
objectMean <- distMean[distMean$kind=="Asterism",2]
for (i in c(1:109))
objectMean <- distMean[distMean$kind=="Asterism",2]
objectMean[i] <- distMean[distMean$kind=="Asterism",2]
for (i in c(1:109))
objectMean[i] <- distMean[distMean$kind=="Asterism",2]
for (i in c(1:109))
objectMean[i] <- distMean[distMean$kind==messier[i,3],2]
objectMean
View(distMean)
objectMean[73,]
objectMean[73]
objectMean[72]
messierDF$mean <- objectMean
messierDF
ggplot(messierDF,aes(factor(kind,levels=kind[order(mean)]),dist)) + geom_violin() + xlab("Kind of sky object") + ylab("Log 10 of distance") + stat_summary(fun.y=mean,geom="point",size=2,color="red")
messierDF$mag <- messier[,7]
messierDF
plot(messierDF$dist,messierDF$mag)
ggplot(messierDF,aes(dist,mag)) + geom_point()
ggplot(messierDF,aes(mag,dist)) + geom_point()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth()
ggplot(messierDF,aes(mag,dist)) + geom_point()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth()
ggplot(messierDF,aes(mag,dist)) + geom_point()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth() + xlab("Apparent magnitute") + ylab("Logarithms of distance")
ggplot(messierDF,aes(mag,dist)) + geom_point()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth() + xlab("Apparent magnitute") + ylab("Logarithms of distance")
messierDF$size <- messier[,6]
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth() + xlab("Apparent magnitute") + ylab("Logarithms of distance")+scale_area()
ggplot(messierDF,aes(mag,dist)) + geom_point() + stat_smooth() + xlab("Apparent magnitute") + ylab("Logarithms of distance")+scale_size_area()
ggplot(messierDF,aes(mag,dist,size=size)) + geom_point() + stat_smooth() + xlab("Apparent magnitute") + ylab("Logarithms of distance")+scale_size_area()
rm all
rm(a;;)
rm
rm(list=ls(all=TRUE))
waterlevel = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/PortlandWaterLevel2003.csv")
time <- paste(waterlevel[,2],waterlevel[,3])
wlDF = data.frame(time=time,wl=waterlevel[,4])
datetime <- strptime(wlDF$time,"%Y/%m/%d %H:%M")
smooth1 <- rollmean(wlDF$wl,3,fill="extend")
library('zoo')
smooth1 <- rollmean(wlDF$wl,3,fill="extend")
smooth2 <- rollmean(wlDF$wl,12,fill="extend")
smooth3 <- rollmean(wlDF$wl,24,fill="extend")
require(lattice)
horizonplot()
suppressMessages(library(latticeExtra))
install.packages("latticeExtra")
horizonplot()
install.packages("latticeExtra")
suppressMessages(library(latticeExtra))
horizonplot()
wlTable <- table(cut(wlDF,breaks="day"))
horizonplot(wlDF$wl)
horizonplot(smooth())
horizonplot(smooth1)
split(1:10,1:3)
split(1:12,1:3)
split(1:24,1:12)
split(1:24,1:2)
wlDF$date <- waterlevel[,2]
split(wlDF, wlDF$date)
splitDF <- split(wlDF, wlDF$date)
percept <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW1/HW-1-Data/PerceptionExperiment2007-2015Fall.csv",header=TRUE)
percept
View(percept)
perceptDF = data.frame(value=percept$Response,group=percept$TestNumber)
beanplot(perceptDF$value,perceptDF$group)
install.packages("beanplot")
install.packages("beanplot")
library("beanplot")
beanplot(perceptDF$value,perceptDF$group)
beanplot(perceptDF$group,perceptDF$value)
beanplot(perceptDF$value ~ perceptDF$group)
perceptDF2 = data.frame(value=percept[1105:1380,7],group=percept[1105:1380,4])
beanplot(perceptDF2$value ~ perceptDF2$group)
beanplot(perceptDF$value ~ perceptDF$group)
beanplot(perceptDF2$value ~ perceptDF2$group)
beanplot(perceptDF$value ~ perceptDF$group)
beanplot(perceptDF2$value ~ perceptDF2$group)
beanplot(perceptDF$value ~ perceptDF$group)
View(perceptDF)
beanplot(perceptDF2$value ~ perceptDF2$group)
beanplot(perceptDF$value ~ perceptDF$group)
beanplot(perceptDF2$value ~ perceptDF2$group)
rm(percept)
rm(perceptDF)
rm(perceptDF2)
View(wlDF)
d1 = wlDF$wl[1:24]
require(lattice)
require(latticeExtra)
horizonplot(d1)
change <- prices/matrix(rep(prices[1,],NROW(prices)),nrow=NROW(prices),ncol=NCOL(prices),byrow=TRUE) -1
prices <- na.omit(merge(W0DOW[,4],GSPC[,4],RUT[,4],E1DOW[,4],P1DOW[,4],DJUBS[,4]))
set.seed(123)
mydat <- ts(matrix(cumsum(rnorm(150 * 10)), ncol = 10))
mydat
mydat <- ts(matrix(wlDF$wl[1:240],ncol=10))
mydat
horizonplot(mydat)
horizonplot(mydat,layout=c(1,10))
intel=read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/Intel1990-2000.csv")
View(intel)
montana = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MontanaPopulationData.csv")
montana = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MontanaPopulationData.csv")
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
pairs(messier)
View(messier)
View(messier[1],messier[5])
View(messier[1:5])
pairs(messier[1],messier[5])
pairs(messier[1:5])
pairs(messier[1:10])
pairs(messier[c(1,6,7,8,9,10)])
View(messier)
View(messier)
pairs(messier[c(1,13)])
corr(messier[1],messier[13])
cor(messier[1],messier[13])
help(reorder)
View(waterlevel)
View(intel)
View(wlDF)
messier  <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MessierData.csv")
messier
View(messier)
reorder(messier,messier.Kind,mean)
reorder(messier,messier$Kind,mean)
help(geom_smooth)
library(gggplot2)
library(ggplot2)
help(geom_smooth)
percept <- read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW1/HW-1-Data/PerceptionExperiment2007-2015Fall.csv",header=TRUE)
View(percept)
View(percept)
n.each = 1000
ID = 1:1000
dataA = rnorm(n.each, 2, 1)
selector = round(runif(n.each, 0, 1))
dataB = (1.0 - selector) * rnorm(n.each, 1.2, .25) + selector * rnorm(n.each, 2.8, .25)
data = c(dataA, dataB)
values = data
dataGroup = rep(c("A", "B"), each=n.each)
numericGroup = rep(c(1, 2), each=n.each)
ds = data.frame(value=data, group=dataGroup)
head(ds)
plot(as.numeric(absDevDF$test),absDevDF$absDev,col=rgb(1,0,0,0.5),xlab="Test",main="Univariate scatter plot")
View(percept)
perceptDF = data.frame(value=percept[,7],group=percept[,2])
ggplot(perceptDF,aes(x=group,y=value)) + geom_point()
library(ggplot2)
ggplot(perceptDF,aes(x=group,y=value)) + geom_point()
ggplot(perceptDF,aes(x=group,y=value)) + geom_violin()
ggplot(perceptDF,aes(factor(group),value)) + geom_violin()
ggplot(perceptDF,aes(factor(group),value)) + geom_violin() + geom_jitter()
ggplot(perceptDF,aes(factor(group),value)) + geom_violin()
ggplot(perceptDF,aes(factor(group),value)) + geom_violin(adjust=.5)
ggplot(perceptDF,aes(factor(group),value)) + geom_violin() + geom_jitter()
ggplot(perceptDF,aes(factor(group),value)) + geom_violin(adjust=.5)
ggplot(perceptDF,aes(factor(group),value)) + geom_violin() + geom_jitter()
montana = read.csv("~/Dropbox/5_Career/DePaul/CSC465_DataVisualization/HW2/Datasets/MontanaPopulationData.csv")
plot(montana[,1],log(montana[,2]),xlab="Year",ylab="Natural Log of population",type="b",main="Logarithms of montana population")
View(montana)
plot(montana[,1],log(montana[,2]/montana[1,2]),xlab="Year",ylab="Natural Log of population",type="b",main="Logarithms of montana population")
axis(side = 1, at = c(0,2,20))
axis(side = 2, at = c(0,2,20))
axis(side = 1, at = c(0,2,20))
plot(montana[,1],log(montana[,2]/montana[1,2]),xlab="Year",ylab="Natural Log of population",type="b",main="Logarithms of montana population")
axis(side = 2, at = c(0:2,10))
axis(side = 2, at = c(0:10))
plot(montana[,1],log(montana[,2]/montana[1,2]),xlab="Year",ylab="Natural Log of population",type="b",main="Logarithms of montana population")
mydat <- ts(matrix(wlDF$wl[1:240],ncol=10))
horizonplot(mydat,layout=c(1,10))
library(lattice)
horizonplot(mydat,layout=c(1,10))
library(latticeExtra)
horizonplot(mydat,layout=c(1,10))
census <- read.csv("//Users/Dachi/Dropbox/5_Career/DePaul/CSC465_DataVisualization/Project/data/datause1.csv")
View(census)
corrplot
cor
install.packages(corrplot)
cor(census[,5],census[,6])
cor(census[,5:30])
install.packages("corrplot")
censusDT <- data.frame(census[,5:15])
View(census)
View(censusDT)
censusDT <- data.frame(census[,5:14])
cor(censusDT)
library(corrplot)
corrs <- cor(censusDT)
corrplot(corrs)
colnames(censusDT) <- c(1:10)
corrs <- cor(censusDT)
corrplot(corrs)
census <- read.csv("//Users/Dachi/Dropbox/5_Career/DePaul/CSC465_DataVisualization/Project/data/datause1.csv")
censusDT <- data.frame(census[,5:14])
hist(censusDT[,1])
hist(censusDT[,2])
hist(censusDT[,3])
hist(censusDT[,1])
hist(censusDT[,4])
hist(censusDT[,5])
hist(censusDT[,1:10])
hist(censusDT[,1:2])
hist(censusDT[,1])
hist(censusDT[,2])
hist(censusDT[,3])
hist(censusDT[,4])
census <- read.csv("//Users/Dachi/Dropbox/5_Career/DePaul/CSC465_DataVisualization/Project/data/datause1.csv")
censusDT <- data.frame(census[,5:14])
hist(censusDT[,1])
hist(censusDT[,2])
hist(censusDT[,3])
hist(censusDT[,2])
require(ggplot2)
require(ggmap)
require(maps)
cook <- map_data('county',region="cook")
cook <- map_data('county',regions="cook")
cook <- map_data('county',region="Cook")
cook <- map_data('city',region="chicago")
library(mapproj)
cook <- map_data('city',region="chicago")
path <- '~/Dropbox/5_Career/Projects/d3_project/'
setwd(path)
path <- '~/Dropbox/5_Career/Projects/d3_project/'
setwd(path)
ogrInfo("chicagogeo.geojson","OGRGeoJSON")
library(rgdal)
library(ggplot2)
library(maptools)
library(rgeos)
ogrInfo("chicagogeo.geojson","OGRGeoJSON")
ogrInfo("chicago.json","OGRGeoJSON")
wd
path <- '~/Dropbox/5_Career/Projects/d3_project/data/'
setwd(path)
ogrInfo("chicagogeo.geojson","OGRGeoJSON")
chicago <- readOGR("chicagogeo.geojson","OGRGeoJSON")
ggplot() + geom_polygon(data=chicago,aes(x=long,y=lat,group=group))
ggplot() + geo_map(data=chicago,map=chicago,aes(x=long,y=lat),color="white",size=0.5)
ggplot() + geom_map(data=chicago,map=chicago,aes(x=long,y=lat),color="white",size=0.5)
ggplot() + geom_polygon(data=chicago,aes(x=long,y=lat,group=group),color='blue')
ggplot() + geom_polygon(data=chicago,aes(x=long,y=lat,group=group),color='green')
census <- read.csv('datause1.csv',header = TRUE, sep = ',')
View(census)
census$Change_Population <- as.numeric(census$Change_Population)
